-- Retrieve the total number of orders placed:

SELECT COUNT(order_id)
FROM pizza_sales.order_details;

-- Calculate the total revenue generated from pizza sales

SELECT SUM(order_details.quantity*pizzas.price)
FROM order_details
JOIN pizzas on order_details.pizza_id=pizzas.pizza_id;

-- Identify the highest-priced pizza
 SELECT MAX(price)
 FROM pizzas;
 
-- Identify the most common pizza size ordered.

Select pizzas.size, sum(order_details.quantity) as count_size
from order_details 
join pizzas 
on order_details.pizza_id = pizzas.pizza_id
group by pizzas.size
order by count_size desc;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT pizzas.pizza_type_id,sum(order_details.quantity) 
FROM pizzas
JOIN order_details on pizzas.pizza_id=order_details.pizza_id
Group by pizzas.pizza_type_id
order by sum(order_details.quantity) DESC
LIMIT 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.

select pizza_types.category,
sum(order_details.quantity) as quantity
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.category order by quantity desc;

-- Determine the distribution of orders by hour of the day.

SELECT
HOUR(time) AS hour, COUNT(order_id) AS order_count
FROM
orders
GROUP BY HOUR(time);

-- Join relevant tables to find the category-wise distribution of pizzas.

select category , count(pizza_type_id) from pizza_types
group by category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.

select avg(quantity) from
(select orders.date, sum(order_details.quantity) as quantity
from orders join order_details
on orders.order_id = order_details.order_id
group by orders.date) as order_quantity ;

-- Determine the top 3 most ordered pizza types based on revenue.

select pizza_types.name,
sum(order_details.quantity * pizzas.price) as revenue
from pizza_types join pizzas
on pizzas.pizza_type_id = pizza_types.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.name order by revenue desc limit 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

select pizza_types.name,
((sum(order_details.quantity * pizzas.price))/(SELECT SUM(order_details.quantity*pizzas.price)
FROM order_details
JOIN pizzas on order_details.pizza_id=pizzas.pizza_id))*100 as percentage_revenue
from pizza_types join pizzas
on pizzas.pizza_type_id = pizza_types.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.name order by percentage_revenue desc ;

-- Analyze the cumulative revenue generated over time.

SELECT orders.time,SUM(order_details.quantity*pizzas.price),orders.order_id
FROM orders 
left JOIN order_details On orders.order_id=order_details.order_id
join pizzas ON pizzas.pizza_id=order_details.pizza_id
Group by order_id 
order by time asc;

select date,
sum(revenue) over(order by date) as cum_revenue
from
(select orders.date,
sum(order_details.quantity * pizzas.price) as revenue
from order_details join pizzas
on order_details.pizza_id = pizzas.pizza_id
join orders
on orders.order_id = order_details.order_id
group by orders.date) as sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

Select name ,revenue
from 
(select category, name, revenue,
rank() over(partition by category order by revenue desc) as rn
from
(select pizza_types.category, pizza_types.name,
sum((order_details.quantity) * pizzas.price) as revenue
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.category, pizza_types.name) as a) as b
